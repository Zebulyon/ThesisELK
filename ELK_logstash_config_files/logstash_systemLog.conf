
input {
	beats {
		port => "5044"
	}
}

filter {


	grok 
	{
		# Here to save the original message
		# It is in a speperate grok filter instance to make sure that break_on_match can be set to true
		# The reason we want this is to make that no multiple matches happens for the same line
		match => { "message" => "%{GREEDYDATA:event.original}"}
	}

	grok
	{
		break_on_match => true

		match => { "message" => "%{TIMESTAMP_ISO8601:timestamp_string} - %{NOTSPACE:process.user} - %{WORD:log.level} - %{GREEDYDATA:message_string}"}

		match => { "message" => "%{SYSLOGTIMESTAMP:timestamp_string_sys}%{SPACE}%{NOTSPACE:process.name}%{SPACE}%{SYSLOGPROG}: %{GREEDYDATA:message_string}"}
		
		
	}

	if ( "" in [timestamp_string_sys])
	{
		mutate {
			replace => [ "timestamp_string_sys", "2019 %{timestamp_string_sys}"]
		}

		date {
      		match => [ "timestamp_string_sys", "YYYY MMM  dd HH:mm:ss"]
    	}
	}
	else
	{
		date {
      		match => [ "timestamp_string", "yyyy-MM-dd HH:mm:ss,SSS" , "MMM  dd HH:mm:ss"]
    	}
	}
	



	mutate
	{
		update => { "message" => "%{message_string}" }
		remove_field => [ "message_string"]
		remove_field => [ "timestamp_string" ]
	}

}

output {
	elasticsearch { 
		hosts => ["http://elasticsearch:9200"] 
		index => "logstash_pl_agent" 
	}
	
	stdout{ codec => rubydebug }
}

