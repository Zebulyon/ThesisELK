input {

	#stdin{}

	beats {
		port => "5044"
	}
}

filter {

	grok 
	{
		#The unchanged origianl message
		match => { "message" => "%{GREEDYDATA:event.original}"}
	}

	grok
	{

		break_on_match => true
		#Custom pattern for handeling the unique DATE TIME STAMP of the ss7trace files
		#(?<timestamp_string>%{YEAR} %{MONTH} %{MONTHDAY}  %{TIME}:%{INT})

		#Full messages
		match => { "message" => "%{WORD:event.type}:%{SPACE}(?<timestamp_string>%{YEAR} %{MONTH} %{MONTHDAY}  %{TIME}:%{INT})%{SPACE}%{INT:process.type}:%{INT:log.sequence}\nSender:%{SPACE}(?<process.sender.module>[^:]*):(?<process.sender.module_instance>[^\n]*)\nReceiver:%{SPACE}(?<process.receiver.module>[^:]*):(?<process.receiver.module_instance>[^\n]*)\nPrimitive:%{SPACE}%{INT:event.message.type}\nPID:%{INT:process.pid}%{SPACE}TID:%{INT:process.thread.id}%{SPACE}L:%{INT:log.interal.level}\nSize:%{SPACE}%{INT:message_size}%{GREEDYDATA:message_string}"}
		match => { "message" => "%{WORD:event.type}:%{SPACE}(?<timestamp_string>%{YEAR} %{MONTH} %{MONTHDAY}  %{TIME}:%{INT})%{SPACE}%{INT:process.type}:%{INT:log.sequence}\nSender:%{SPACE}(?<process.sender.module>[^:]*):(?<process.sender.module_instance>[^\n]*)\nReceiver:%{SPACE}(?<process.receiver.module>[^:]*):(?<process.receiver.module_instance>[^\n]*)\nPrimitive:%{SPACE}%{INT:event.message.type}\nPID:%{INT:process.pid}%{SPACE}TID:%{INT:process.thread.id}%{SPACE}L:%{INT:log.internal.level}\nMD%{SPACE}Size:%{GREEDYDATA:message_data.size}\nSize:%{SPACE}%{INT:message_size}%{GREEDYDATA:message_string}"}
		
		#Debug messages
		match => { "message" => "(?<timestamp_string>%{YEAR} %{MONTH} %{MONTHDAY}  %{TIME}:%{INT})%{SPACE}%{INT:process.type}:%{INT:log.sequence}\n(?<process.name>[^:]*):%{INT:process.instance}%{SPACE}PID:%{INT:process.pid}%{SPACE}TID:%{INT:process.thread.id}%{SPACE}L:%{INT:log.internal.level}%{SPACE}Timer%{SPACE}(?<message_string>[^\n\n]*)"}

		match => { "message" => "(?<timestamp_string>%{YEAR} %{MONTH} %{MONTHDAY}  %{TIME}:%{INT})%{SPACE}%{INT:process.type}:%{INT:log.sequence}\n>>(?<log.level>[^<<]*)<<%{SPACE}(?<process.name>[^:]*):%{INT:process.instance}%{SPACE}(?<log.origin.file.name>[^:]*):%{INT:log.origin.file.line}%{SPACE}(?<host.hostname>[^:]*):%{INT:host.process.id}%{SPACE}(?<process.state>[A-Z,a-z,0-9]*)%{SPACE}(?<event.state>[A-Z,a-z,0-9]*)\n(?<message>[^\n\n]*)"}
		match => { "message" => "(?<timestamp_string>%{YEAR} %{MONTH} %{MONTHDAY}  %{TIME}:%{INT})%{SPACE}%{INT:process.type}:%{INT:log.sequence}\n>>(?<log.level>[^<<]*)<<%{SPACE}(?<process.name>[^:]*):%{INT:process.instance}%{SPACE}(?<log.origin.file.name>[^:]*):%{INT:log.origin.file.line}%{SPACE}(?<host.hostname>[^:]*):%{INT:host.process.id}%{SPACE}(?<process.state>[A-Z,a-z,0-9]*)%{SPACE}(?<event.state>[A-Z,a-z,0-9]*)%{SPACE}Error%{SPACE}%{INT:error.code}\n(?<message_string>[^\n\n]*)"}	

		#SYSLOG VER = 1, Still needs work
		match => { "message" => "(?<timestamp_string>%{YEAR} %{MONTH} %{MONTHDAY}  %{TIME}:%{INT})%{SPACE}%{INT:process.type}:%{INT:log.sequence}\n%{GREEDYDATA} %{SPACE}(?<log.module.name>[^:]*):%{INT:log.module.instance}%{SPACE}PID:%{INT:log.module.pid}%{SPACE}TID:%{INT:log.module.thread.id}%{SPACE}L:%{INT:log.module.level.internal}%{SPACE}(?<log.origin.file.name>[^ ]*)%{SPACE}%{INT:log.origin.file.line}%{SPACE}%{INT:n1.zero}%{SPACE}%{INT:process.pid}%{SPACE}%{INT:error.arg1}%{SPACE}%{INT:error.arg2}%{SPACE}%{INT:error.arg3}%{SPACE}%{INT:error.code}"}
		#SYSLOG VER = 2, Still needs work
		match => { "message" => "(?<timestamp_string>%{YEAR} %{MONTH} %{MONTHDAY}  %{TIME}:%{INT})%{SPACE}%{INT:process.type}:%{INT:log.sequence}\n%{GREEDYDATA} %{SPACE}(?<log.module.name>[^:]*):%{INT:log.module.instance}%{SPACE}PID:%{INT:log.module.pid}%{SPACE}TID:%{INT:log.module.thread.id}%{SPACE}L:%{INT:log.module.level.internal}%{SPACE}(?<log.origin.file.name>[^ ]*)%{SPACE}%{INT:log.origin.file.line}%{SPACE}%{INT:error.code}%{SPACE}(?<message_string>[^\n]*)"}

	}


	date 
	{
	  #Second line of match is for the pl_agent log files
      match => [ "timestamp_string", "yyyy MMM dd  HH:mm:ss:SSS", "yyyy-MM-dd HH:mm:ss,SSS" ]
    }

	#If one wants to check if a number field exist use if ([foobar])
	if ( "" in [message_string])
	{
		mutate {
			#add_tag => [ "Success" ]
			update => { "message" => "%{message_string}" }
			remove_field => [ "message_string"]

		}
	}
	else 
	{
		mutate {
			#add_tag => [ "Failure" ]
			remove_field => [ "message" ]
		}
	}

	mutate
	{
		remove_field => [ "timestamp_string"]

		replace => { type => "ss7trace"}
	}

}

output {

	elasticsearch { 
		hosts => ["http://elasticsearch:9200"] 
		index => "logstash_ss7trace" 
	}

	#For debug Purposes	
	#stdout{ 
	#	codec => rubydebug 
	#}
}

